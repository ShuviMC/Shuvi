From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Sayakie <sayakie@kakao.com>
Date: Sun, 20 Aug 2023 17:30:52 +0900
Subject: [PATCH] AppleSkin protocol


diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 12e177516feb8c6c2e6c1d526cad0663900a8870..4fb19ffa26b86eae9a4d94e5a4eb786c07fff091 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -1624,6 +1624,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         }
 
         //this.profiler.popPush("server gui refresh"); // Purpur
+        org.shuvimc.shuvi.integrated.protocol.AppleSkinProtocol.tick();
 
         //MinecraftTimings.tickablesTimer.startTiming(); // Spigot // Paper // Purpur
         for (int i = 0; i < this.tickables.size(); ++i) {
diff --git a/src/main/java/net/minecraft/server/players/PlayerList.java b/src/main/java/net/minecraft/server/players/PlayerList.java
index ebcdf6aee72b817b9bbba8f8d580eae1876fc6e5..921e6ed866ae83337d4efa00944feb98dc894d79 100644
--- a/src/main/java/net/minecraft/server/players/PlayerList.java
+++ b/src/main/java/net/minecraft/server/players/PlayerList.java
@@ -342,6 +342,8 @@ public abstract class PlayerList {
             return;
         }
 
+        org.shuvimc.shuvi.integrated.protocol.AppleSkinProtocol.onPlayerLoggedIn(player); // Shuvi - support AppleSkin
+
         final net.kyori.adventure.text.Component jm = playerJoinEvent.joinMessage();
 
         if (jm != null && !jm.equals(net.kyori.adventure.text.Component.empty())) { // Paper - Adventure
@@ -586,6 +588,7 @@ public abstract class PlayerList {
     }
     public net.kyori.adventure.text.Component remove(ServerPlayer entityplayer, net.kyori.adventure.text.Component leaveMessage) {
         // Paper end
+        org.shuvimc.shuvi.integrated.protocol.AppleSkinProtocol.onPlayerLoggedOut(entityplayer); // Shuvi - support AppleSkin
         org.purpurmc.purpur.task.BossBarTask.removeFromAll(entityplayer.getBukkitEntity()); // Purpur
         ServerLevel worldserver = entityplayer.serverLevel();
 
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 8738699b0379129c375b5b442ee9fa20179f66cb..242896f783908e612ff53eeb70f1f5c93cd0833b 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -1072,6 +1072,13 @@ public final class CraftServer implements Server {
         this.console.paperConfigurations.reloadConfigs(this.console);
         org.purpurmc.purpur.PurpurConfig.init((File) console.options.valueOf("purpur-settings")); // Purpur
         org.shuvimc.shuvi.ShuviConfig.init((File) console.options.valueOf("shuvi-settings")); // Shuvi
+        // Shuvi start - support AppleSkin
+        if (org.shuvimc.shuvi.ShuviConfig.useAppleSkinProtocol) {
+            org.shuvimc.shuvi.integrated.protocol.AppleSkinProtocol.enableAllPlayers();
+        } else {
+            org.shuvimc.shuvi.integrated.protocol.AppleSkinProtocol.disableAllPlayers();
+        }
+        // Shuvi end - support AppleSkin
         for (ServerLevel world : this.console.getAllLevels()) {
             // world.serverLevelData.setDifficulty(config.difficulty); // Paper - per level difficulty
             world.setSpawnSettings(world.serverLevelData.getDifficulty() != Difficulty.PEACEFUL && config.spawnMonsters, config.spawnAnimals); // Paper - per level difficulty (from MinecraftServer#setDifficulty(ServerLevel, Difficulty, boolean))
diff --git a/src/main/java/org/shuvimc/shuvi/ShuviConfig.java b/src/main/java/org/shuvimc/shuvi/ShuviConfig.java
index 57f0234361f015af2e05ef5d197f550dd1814352..b82755295a88da893961aa5964e91607cb30ed56 100644
--- a/src/main/java/org/shuvimc/shuvi/ShuviConfig.java
+++ b/src/main/java/org/shuvimc/shuvi/ShuviConfig.java
@@ -161,6 +161,11 @@ public final class ShuviConfig {
         statisticsInterval = Math.max(getInt("settings.player.statistics-interval", statisticsInterval), 1);
     }
 
+    public static boolean useAppleSkinProtocol = false;
+    private static void miscSettings() {
+        useAppleSkinProtocol = getBoolean("settings.misc.protocol.support-apple-skin", useAppleSkinProtocol);
+    }
+
     /** @see <a href="https://bugs.mojang.com/browse/MC-26304">MC-26304</a> */
     public static boolean fixMC26304 = true;
     /** @see <a href="https://bugs.mojang.com/browse/MC-31819">MC-31918</a> */
diff --git a/src/main/java/org/shuvimc/shuvi/integrated/protocol/AppleSkinProtocol.java b/src/main/java/org/shuvimc/shuvi/integrated/protocol/AppleSkinProtocol.java
new file mode 100644
index 0000000000000000000000000000000000000000..d6edaa4a5e9d27f0aeeaf115bb870c1718897ede
--- /dev/null
+++ b/src/main/java/org/shuvimc/shuvi/integrated/protocol/AppleSkinProtocol.java
@@ -0,0 +1,92 @@
+package org.shuvimc.shuvi.integrated.protocol;
+
+import io.netty.buffer.Unpooled;
+import net.minecraft.network.FriendlyByteBuf;
+import net.minecraft.network.protocol.game.ClientboundCustomPayloadPacket;
+import net.minecraft.resources.ResourceLocation;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.level.ServerPlayer;
+import net.minecraft.world.food.FoodData;
+import org.jetbrains.annotations.Contract;
+import org.jetbrains.annotations.NotNull;
+import org.shuvimc.shuvi.ShuviConfig;
+
+import java.util.*;
+
+public final class AppleSkinProtocol {
+
+    public static final String ID = "appleskin";
+
+    private static final ResourceLocation SATURATION_SYNC = id("saturation_sync");
+    private static final ResourceLocation EXHAUSTION_SYNC = id("exhaustion_sync");
+
+    private static final Map<UUID, Float> lastSaturationLevels = new HashMap<>();
+    private static final Map<UUID, Float> lastExhaustionLevels = new HashMap<>();
+
+    private static final Set<ServerPlayer> players = new HashSet<>();
+
+    @Contract("_ -> new")
+    public static @NotNull ResourceLocation id(final @NotNull String path) {
+        return new ResourceLocation(ID, path);
+    }
+
+    public static void enableAllPlayers() {
+        for (final ServerPlayer player : MinecraftServer.getServer().getPlayerList().getPlayers()) {
+            onPlayerLoggedIn(player);
+        }
+    }
+
+    public static void disableAllPlayers() {
+        for (final ServerPlayer player : MinecraftServer.getServer().getPlayerList().getPlayers()) {
+            onPlayerLoggedOut(player);
+        }
+    }
+
+    public static void tick() {
+        if (ShuviConfig.useAppleSkinProtocol) {
+            for (final ServerPlayer player : players) {
+                final FoodData food = player.getFoodData();
+
+                final float saturation = food.getSaturationLevel();
+                final Float previousSaturation = lastSaturationLevels.get(player.getUUID());
+                if (previousSaturation == null || saturation != previousSaturation) {
+                    final FriendlyByteBuf buf = new FriendlyByteBuf(Unpooled.buffer());
+                    buf.writeFloat(saturation);
+
+                    player.connection.send(new ClientboundCustomPayloadPacket(SATURATION_SYNC, buf));
+                    lastSaturationLevels.put(player.getUUID(), saturation);
+                }
+
+                final float exhaustion = food.getExhaustionLevel();
+                final Float previousExhaustion = lastExhaustionLevels.get(player.getUUID());
+                if (previousExhaustion == null || exhaustion != previousExhaustion) {
+                    final FriendlyByteBuf buf = new FriendlyByteBuf(Unpooled.buffer());
+                    buf.writeFloat(exhaustion);
+
+                    player.connection.send(new ClientboundCustomPayloadPacket(EXHAUSTION_SYNC, buf));
+                    lastExhaustionLevels.put(player.getUUID(), exhaustion);
+                }
+            }
+        }
+    }
+
+    public static void onPlayerLoggedIn(final @NotNull ServerPlayer player) {
+        if (ShuviConfig.useAppleSkinProtocol) {
+            players.add(player);
+            resetPlayerData(player);
+        }
+    }
+
+    public static void onPlayerLoggedOut(final @NotNull ServerPlayer player) {
+        if (ShuviConfig.useAppleSkinProtocol) {
+            players.remove(player);
+            resetPlayerData(player);
+        }
+    }
+
+    private static void resetPlayerData(final @NotNull ServerPlayer player) {
+        lastExhaustionLevels.remove(player.getUUID());
+        lastSaturationLevels.remove(player.getUUID());
+    }
+
+}
